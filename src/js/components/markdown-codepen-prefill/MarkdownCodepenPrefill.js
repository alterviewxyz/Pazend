import React, {Component} from 'react';
import PropTypes from 'prop-types';
import CodepenPrefill from 'react-codepen-prefill';

import Button from '../button/Button';

import codepenIcon from '../../../assets/images/icons/codepen.svg';

import './MarkdownCodepenPrefill.css';
import {extractCodeFromSnippet} from '../../api/snippets';

const CLASS = 'sok-MarkdownCodepenPrefill';

const HEADING_LOOKUP_VALUE = 'Demo';

const HEADING_LEVEL_TYPES = {
	1: 'h1',
	2: 'h2',
	3: 'h3',
	4: 'h4',
	5: 'h5',
	6: 'h6',
};

class MarkdownCodepenPrefill extends Component {
	static propTypes = {
		level: PropTypes.number,
		children: PropTypes.array,
		source: PropTypes.string,
	};

	static defaultProps = {
		level: 1,
		children: null,
	};

	constructor(props) {
		super(props);

		this.state = {};
	}

	renderCodepenPrefill = () => {
		const {children, source} = this.props;

		const shouldRender = children[0].props.value === HEADING_LOOKUP_VALUE;

		if (!shouldRender) {
			return null;
		}

		const htmlCode = extractCodeFromSnippet(source, 'html');
		const cssCode = extractCodeFromSnippet(source, 'css');
		const jsCode = extractCodeFromSnippet(source, 'js');
		const codepenButton = (
			<React.Fragment>
				<img src={codepenIcon} alt="CodePen Icon" />
				<span>Edit on CodePen</span>
			</React.Fragment>
		);

		return (
			<CodepenPrefill
				label={codepenButton}
				className={`${CLASS}-codepenButton`}
				target="_blank"
				title="30 Seconds of Knowledge - Snippet"
				description="A snippet generated by 30 Seconds of Knowledge"
				js={jsCode}
				css={cssCode}
				html={htmlCode}
				editors="111"
			/>
		);
	};

	render() {
		const {level, children} = this.props;
		const Type = HEADING_LEVEL_TYPES[level];

		return (
			<React.Fragment>
				<Type>{children}</Type>
				{this.renderCodepenPrefill()}
			</React.Fragment>
		);
	}
}

export default MarkdownCodepenPrefill;
